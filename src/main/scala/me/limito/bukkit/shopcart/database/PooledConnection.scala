package me.limito.bukkit.shopcart.database

import java.sql._
import java.util.Properties
import java.util.concurrent.Executor
import scala.Predef.String
import scala.Array
import java.{util, sql}

class PooledConnection(source: JdbcDataSource, base: Connection) extends Wrapper with AutoCloseable with Connection {
  def unwrap[T](iface: Class[T]): T = {
    base.unwrap(iface)
  }

  def isWrapperFor(iface: Class[_]): Boolean = {
    base.isWrapperFor(iface)
  }

  def createStatement: Statement = {
    base.createStatement
  }

  def prepareStatement(sql: String): PreparedStatement = {
    base.prepareStatement(sql)
  }

  def prepareCall(sql: String): CallableStatement = {
    base.prepareCall(sql)
  }

  def nativeSQL(sql: String): String = {
    base.nativeSQL(sql)
  }

  def setAutoCommit(autoCommit: Boolean) {
    base.setAutoCommit(autoCommit)
  }

  def getAutoCommit: Boolean = {
    base.getAutoCommit
  }

  def commit() {
    base.commit()
  }

  def rollback() {
    base.rollback()
  }

  def close() {
    source.returnConnection(this)
  }

  def isClosed: Boolean = {
    base.isClosed
  }

  def getMetaData: DatabaseMetaData = {
    base.getMetaData
  }

  def setReadOnly(readOnly: Boolean) {
    base.setReadOnly(readOnly)
  }

  def isReadOnly: Boolean = {
    base.isReadOnly
  }

  def setCatalog(catalog: String) {
    base.setCatalog(catalog)
  }

  def getCatalog: String = {
    base.getCatalog
  }

  def setTransactionIsolation(level: Int) {
    base.setTransactionIsolation(level)
  }

  def getTransactionIsolation: Int = {
    base.getTransactionIsolation
  }

  def getWarnings: SQLWarning = {
    base.getWarnings
  }

  def clearWarnings() {
    base.clearWarnings()
  }

  def createStatement(resultSetType: Int, resultSetConcurrency: Int): Statement = {
    base.createStatement(resultSetType, resultSetConcurrency)
  }

  def prepareStatement(sql: String, resultSetType: Int, resultSetConcurrency: Int): PreparedStatement = {
    base.prepareStatement(sql, resultSetType, resultSetConcurrency)
  }

  def prepareCall(sql: String, resultSetType: Int, resultSetConcurrency: Int): CallableStatement = {
    base.prepareCall(sql, resultSetType, resultSetConcurrency)
  }

  def getTypeMap: util.Map[String, Class[_]] = {
    base.getTypeMap
  }

  def setTypeMap(map: util.Map[String, Class[_]]) {
    base.setTypeMap(map)
  }

  def setHoldability(holdability: Int) {
    base.setHoldability(holdability)
  }

  def getHoldability: Int = {
    base.getHoldability
  }

  def setSavepoint(): Savepoint = {
    base.setSavepoint()
  }

  def setSavepoint(name: String): Savepoint = {
    base.setSavepoint(name)
  }

  def rollback(savepoint: Savepoint) {
    base.rollback(savepoint)
  }

  def releaseSavepoint(savepoint: Savepoint) {
    base.releaseSavepoint(savepoint)
  }

  def createStatement(resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): Statement = {
    base.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability)
  }

  def prepareStatement(sql: String, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): PreparedStatement = {
    base.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability)
  }

  def prepareCall(sql: String, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): CallableStatement = {
    base.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability)
  }

  def prepareStatement(sql: String, autoGeneratedKeys: Int): PreparedStatement = {
    base.prepareStatement(sql, autoGeneratedKeys)
  }

  def prepareStatement(sql: String, columnIndexes: Array[Int]): PreparedStatement = {
    base.prepareStatement(sql, columnIndexes)
  }

  def prepareStatement(sql: String, columnNames: Array[String]): PreparedStatement = {
    base.prepareStatement(sql, columnNames)
  }

  def createClob: Clob = {
    base.createClob
  }

  def createBlob: Blob = {
    base.createBlob
  }

  def createNClob: NClob = {
    base.createNClob
  }

  def createSQLXML: SQLXML = {
    base.createSQLXML
  }

  def isValid(timeout: Int): Boolean = {
    base.isValid(timeout)
  }

  def setClientInfo(name: String, value: String) {
    base.setClientInfo(name, value)
  }

  def setClientInfo(properties: Properties) {
    base.setClientInfo(properties)
  }

  def getClientInfo(name: String): String = {
    base.getClientInfo(name)
  }

  def getClientInfo: Properties = {
    base.getClientInfo
  }

  def createArrayOf(typeName: String, elements: Array[AnyRef]): sql.Array = {
    base.createArrayOf(typeName, elements)
  }

  def createStruct(typeName: String, attributes: Array[AnyRef]): Struct = {
    base.createStruct(typeName, attributes)
  }

  def setSchema(schema: String) {
    base.setSchema(schema)
  }

  def getSchema: String = {
    base.getSchema
  }

  def abort(executor: Executor) {
    base.abort(executor)
  }

  def setNetworkTimeout(executor: Executor, milliseconds: Int) {
    base.setNetworkTimeout(executor, milliseconds)
  }

  def getNetworkTimeout: Int = {
    base.getNetworkTimeout
  }
}

